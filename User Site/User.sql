CLEAR SCREEN;
SET SERVEROUTPUT ON;
SET VERIFY OFF;

CREATE OR REPLACE PACKAGE QUIZ_COMPETITION_SYSTEM AS

	FUNCTION SCORE_SEARCH
	RETURN NUMBER;
	
	PROCEDURE PLAYER_NAME_SEARCH(PLAYER_NAME OUT VARCHAR2);
	
	PROCEDURE QUES_INFO(QUESTION_ID OUT NUMBER, ROUND_NAME OUT VARCHAR2, QUESTION OUT VARCHAR2, MARKS OUT NUMBER);
	
	PROCEDURE OPTION_VIEW(QUESTION_ID IN NUMBER);
	
END QUIZ_COMPETITION_SYSTEM;	
/

CREATE OR REPLACE PACKAGE BODY QUIZ_COMPETITION_SYSTEM AS
	
	FUNCTION SCORE_SEARCH
	RETURN NUMBER
	IS
	BEGIN
		FOR H IN (SELECT * FROM SCORE) LOOP
			RETURN 1;
		END LOOP;
		RETURN 0;
	END SCORE_SEARCH;
	
	PROCEDURE PLAYER_NAME_SEARCH(PLAYER_NAME OUT VARCHAR2)
	IS
	BEGIN
		FOR I IN (SELECT * FROM Player_info) LOOP
			PLAYER_NAME := I.NAME;
		END LOOP;	
	END PLAYER_NAME_SEARCH;
	
	PROCEDURE QUES_INFO(QUESTION_ID OUT NUMBER, ROUND_NAME OUT VARCHAR2, QUESTION OUT VARCHAR2, MARKS OUT NUMBER)
	IS
	BEGIN
		FOR J IN (SELECT * FROM (SELECT * FROM Asking1@site_link NATURAL JOIN Round_info@site_link) NATURAL JOIN Asking2) LOOP
			QUESTION_ID := J.QID;
			ROUND_NAME := J.ROUND_NAME;
			QUESTION := J.QUESTION;
			MARKS := J.MARKS;
		END LOOP;
	END QUES_INFO;
	
	PROCEDURE OPTION_VIEW(QUESTION_ID IN NUMBER)
	IS
	BEGIN
		FOR K IN (SELECT * FROM Option_List@site_link WHERE OID = (SELECT OID FROM Question_Gallery1@site_link WHERE QID = QUESTION_ID)) LOOP
			DBMS_OUTPUT.PUT_LINE('OPTION : ' || '1. ' || K.OP1 || CHR(9) || '2. ' || K.OP2 || CHR(9) || '3. ' || K.OP3 || CHR(9) || '4. ' || K.OP4);
		END LOOP;
	END OPTION_VIEW;
	
END QUIZ_COMPETITION_SYSTEM;	
/

DECLARE
	QUESTION_ID NUMBER;
	SCORE_FOUND NUMBER;
	PLAYER_NAME VARCHAR2(50);
	ROUND_NAME VARCHAR2(50);
	QUESTION VARCHAR2(100);
	MARKS NUMBER;
BEGIN
	QUESTION_ID := 0;
	SCORE_FOUND := 0;
	
	SCORE_FOUND := QUIZ_COMPETITION_SYSTEM.SCORE_SEARCH;
	
	IF (SCORE_FOUND = 0) THEN
		QUIZ_COMPETITION_SYSTEM.PLAYER_NAME_SEARCH(PLAYER_NAME);
		DBMS_OUTPUT.PUT_LINE(PLAYER_NAME || ', WELCOME TO QUIZ COMPETITION SYSTEM');
		DBMS_OUTPUT.PUT_LINE('DEVELOPED BY : ');
		DBMS_OUTPUT.PUT_LINE('MD. YOUNUS HOSSAIN AHSAN : 190104131');
		DBMS_OUTPUT.PUT_LINE('-');
	END IF;
	
	QUIZ_COMPETITION_SYSTEM.QUES_INFO(QUESTION_ID, ROUND_NAME, QUESTION, MARKS);
	DBMS_OUTPUT.PUT_LINE('ROUND : ' || ROUND_NAME);
	DBMS_OUTPUT.PUT_LINE('-');
	DBMS_OUTPUT.PUT_LINE('QUESTION : ' || QUESTION || CHR(9) || CHR(9) || 'MARKS : ' || MARKS);
	QUIZ_COMPETITION_SYSTEM.OPTION_VIEW(QUESTION_ID);
END;
/

CREATE OR REPLACE TRIGGER CURRECT_ANSWER
BEFORE INSERT ON Answer3
DECLARE
BEGIN
	DBMS_OUTPUT.PUT_LINE('ABSOLUTELY RIGHT !!! YOU HAVE CHOSEN THE CORRECT OPTION ...');
END;
/

CREATE OR REPLACE TRIGGER WRONG_ANSWER
BEFORE INSERT ON Answer4
DECLARE
BEGIN
	DBMS_OUTPUT.PUT_LINE('SORRY !!! YOUR ANSWER IS NOT CORRECT ...');
END;
/

ACCEPT A NUMBER PROMPT "CHOOSE YOUR OPTION : ";

CREATE OR REPLACE PACKAGE QUIZ_COMPETITION_SYSTEM AS

	FUNCTION QUESTION_ID_SEARCH
	RETURN NUMBER;
	
	PROCEDURE CORRECT_ANSWER_SEARCH(QUESTION_ID IN NUMBER, CORRECT_ANSWER OUT NUMBER);
	FUNCTION QUESTION_SEARCH(QUESTION_ID IN NUMBER, QUESTION OUT VARCHAR2)
	RETURN NUMBER;
	
	FUNCTION SCORE_SEARCH
	RETURN NUMBER;
	
	PROCEDURE OPTION_SEARCH(QUESTION_ID IN NUMBER, OPTION1 OUT VARCHAR2, OPTION2 OUT VARCHAR2, OPTION3 OUT VARCHAR2, OPTION4 OUT VARCHAR2);
	
	PROCEDURE PERFORMANCE_EVALUATION;
	
	FUNCTION QUESTION_SEARCH2
	RETURN NUMBER;
	
	--PROCEDURE SCORE_EXIST(QUESTION_ID IN NUMBER, TOTAL_SCORE OUT NUMBER);
	
	PROCEDURE SCORE_CALCULATE(QUESTION_ID IN NUMBER, TOTAL_SCORE OUT NUMBER);
	
	PROCEDURE PLAYER_INFO_SEARCH(PLAYER_NAME OUT VARCHAR2, GENDER OUT VARCHAR2);
	
	FUNCTION CORRECTLY_ANSWERED
	RETURN NUMBER;
	
	FUNCTION INCORRECTLY_ANSWERED
	RETURN NUMBER;
	
	PROCEDURE ULTIMATE_SCORE(FINAL_SCORE OUT NUMBER);
	
END QUIZ_COMPETITION_SYSTEM;	
/

CREATE OR REPLACE PACKAGE BODY QUIZ_COMPETITION_SYSTEM AS

	FUNCTION QUESTION_ID_SEARCH
	RETURN NUMBER
	IS
	BEGIN
		FOR E IN (SELECT * FROM Asking2) LOOP
			RETURN E.QID;
		END LOOP;
		RETURN 0;
	END QUESTION_ID_SEARCH;
	
	PROCEDURE CORRECT_ANSWER_SEARCH(QUESTION_ID IN NUMBER, CORRECT_ANSWER OUT NUMBER)
	IS
	BEGIN
		FOR F IN (SELECT * FROM Answer_List@site_link WHERE QID = QUESTION_ID) LOOP
			CORRECT_ANSWER := F.ANSWER;
		END LOOP;	
	END CORRECT_ANSWER_SEARCH;
	
	FUNCTION QUESTION_SEARCH(QUESTION_ID IN NUMBER, QUESTION OUT VARCHAR2)
	RETURN NUMBER
	IS
	BEGIN
		FOR Z IN (SELECT * FROM Question_Gallery1@site_link WHERE QID = QUESTION_ID) LOOP
			QUESTION := Z.QUESTION;
			RETURN Z.MARKS;
		END LOOP;
	END QUESTION_SEARCH;
	
	FUNCTION SCORE_SEARCH
	RETURN NUMBER
	IS
	BEGIN
		FOR P IN (SELECT * FROM Score) LOOP
			RETURN 1;		
		END LOOP;
		RETURN 0;
	END SCORE_SEARCH;
	
	PROCEDURE OPTION_SEARCH(QUESTION_ID IN NUMBER, OPTION1 OUT VARCHAR2, OPTION2 OUT VARCHAR2, OPTION3 OUT VARCHAR2, OPTION4 OUT VARCHAR2)
	IS
	BEGIN
		FOR K IN (SELECT * FROM Option_List@site_link WHERE OID = (SELECT OID FROM Question_Gallery1@site_link WHERE QID = QUESTION_ID)) LOOP
			OPTION1 := K.OP1;
			OPTION2 := K.OP2;
			OPTION3 := K.OP3;
			OPTION4 := K.OP4;
		END LOOP;	
	END OPTION_SEARCH;
	
	PROCEDURE PERFORMANCE_EVALUATION
	IS
	BEGIN
		FOR P IN (SELECT * FROM Score) LOOP
			FOR Q IN (SELECT RESULT_STATUS FROM (SELECT * FROM Answer3 UNION SELECT * FROM Answer4) WHERE QID = P.QID) LOOP
				DBMS_OUTPUT.PUT_LINE(P.QID || CHR(9) || P.GAIN || CHR(9) || P.TOTAL_SCORE || CHR(9)  || CHR(9) || Q.RESULT_STATUS);	
			END LOOP;	
		END LOOP;	
	END PERFORMANCE_EVALUATION;
	
	FUNCTION QUESTION_SEARCH2
	RETURN NUMBER
	IS
	BEGIN
		FOR U IN (SELECT * FROM Question_Gallery2) LOOP
			RETURN 1;
		END LOOP;
		RETURN 0;
	END QUESTION_SEARCH2;
	
	/*PROCEDURE SCORE_EXIST(QUESTION_ID IN NUMBER, TOTAL_SCORE OUT NUMBER)
	IS
	BEGIN
		FOR T IN (SELECT * FROM Score WHERE QID = QUESTION_ID) LOOP
			TOTAL_SCORE := T.TOTAL_SCORE;		
		END LOOP;	
	END SCORE_EXIST;*/
		
	PROCEDURE SCORE_CALCULATE(QUESTION_ID IN NUMBER, TOTAL_SCORE OUT NUMBER)
	IS
	BEGIN
		FOR S IN (SELECT SUM(GAIN) AS NET_SCORE FROM Score) LOOP
			TOTAL_SCORE := S.NET_SCORE;			
		END LOOP;	
	END SCORE_CALCULATE;
	
	PROCEDURE PLAYER_INFO_SEARCH(PLAYER_NAME OUT VARCHAR2, GENDER OUT VARCHAR2)
	IS
	BEGIN
		FOR I IN (SELECT * FROM Player_info) LOOP
			PLAYER_NAME := I.NAME;
			GENDER := I.GENDER;
		END LOOP;	
	END PLAYER_INFO_SEARCH; 
	
	FUNCTION CORRECTLY_ANSWERED
	RETURN NUMBER
	IS
	BEGIN
		FOR I IN (SELECT COUNT(QID) AS CORRECT_ANSWER FROM Answer3 GROUP BY RESULT_STATUS) LOOP
			RETURN I.CORRECT_ANSWER;
		END LOOP;	
		RETURN 0;
	END CORRECTLY_ANSWERED;
	
	FUNCTION INCORRECTLY_ANSWERED
	RETURN NUMBER
	IS
	BEGIN
		FOR I IN (SELECT COUNT(QID) AS INCORRECT_ANSWER FROM Answer4 GROUP BY RESULT_STATUS) LOOP
			RETURN I.INCORRECT_ANSWER;
		END LOOP;
		RETURN 0;		
	END INCORRECTLY_ANSWERED;
	
	PROCEDURE ULTIMATE_SCORE(FINAL_SCORE OUT NUMBER)
	IS
	BEGIN
		FOR J IN (SELECT SUM(GAIN) AS FINAL_SCORE FROM Score) LOOP
			FINAL_SCORE := J.FINAL_SCORE;
		END LOOP;	
	END ULTIMATE_SCORE;

END QUIZ_COMPETITION_SYSTEM;	
/

DECLARE
	NOT_FOUND EXCEPTION;
	QUESTION_ID NUMBER;
	PLAYER_NAME VARCHAR2(100);
	GENDER VARCHAR2(10);
	QUESTION VARCHAR2(100);
	ACHIEVED INTEGER;
	SCORE_FOUND INTEGER;
	QUESTION_FOUND INTEGER;
	TOTAL_SCORE INTEGER;
	CORRECT_ANSWER NUMBER;
	GIVEN_ANSWER NUMBER;
	CORRECTLY__ANSWERED NUMBER;
	INCORRECTLY__ANSWERED NUMBER;
	TOTAL__ANSWERED NUMBER;
	FINAL_SCORE NUMBER;
	OPTION1 VARCHAR(25);
	OPTION2 VARCHAR(25);
	OPTION3 VARCHAR(25);
	OPTION4 VARCHAR(25);
BEGIN 
	QUESTION_ID := 0;
	ACHIEVED := 0;
	SCORE_FOUND := 0;
	QUESTION_FOUND := 0;
	TOTAL_SCORE := 0;
	CORRECT_ANSWER := 0;
	CORRECTLY__ANSWERED := 0;
	INCORRECTLY__ANSWERED := 0;
	GIVEN_ANSWER := &A;
	
	QUESTION_ID := QUIZ_COMPETITION_SYSTEM.QUESTION_ID_SEARCH;
	
	IF (QUESTION_ID != 0) THEN
		INSERT INTO Answer1@site_link VALUES(QUESTION_ID, GIVEN_ANSWER);
		INSERT INTO Answer2@site_link VALUES(QUESTION_ID, GIVEN_ANSWER);
	END IF;
	
	DELETE FROM Asking1@site_link;
	DELETE FROM Asking2;
	
	QUIZ_COMPETITION_SYSTEM.CORRECT_ANSWER_SEARCH(QUESTION_ID, CORRECT_ANSWER);
	ACHIEVED := QUIZ_COMPETITION_SYSTEM.QUESTION_SEARCH(QUESTION_ID, QUESTION);
	SCORE_FOUND := QUIZ_COMPETITION_SYSTEM.SCORE_SEARCH;
	QUIZ_COMPETITION_SYSTEM.OPTION_SEARCH(QUESTION_ID, OPTION1, OPTION2, OPTION3, OPTION4);
		
	IF (CORRECT_ANSWER = GIVEN_ANSWER) THEN
		INSERT INTO Answer3 VALUES(QUESTION_ID, 'CORRECT');
	ELSE
		INSERT INTO Answer4 VALUES(QUESTION_ID, 'WRONG');
		ACHIEVED := ACHIEVED * (-1);
	END IF;
	
	DBMS_OUTPUT.PUT_LINE('-');
	DBMS_OUTPUT.PUT_LINE('QUESTION : ' || QUESTION);
	IF (CORRECT_ANSWER = 1) THEN		DBMS_OUTPUT.PUT_LINE('ANSWER : 1. ' || OPTION1);
	ELSIF (CORRECT_ANSWER = 2) THEN	DBMS_OUTPUT.PUT_LINE('ANSWER : 2. ' || OPTION2);
	ELSIF (CORRECT_ANSWER = 3) THEN	DBMS_OUTPUT.PUT_LINE('ANSWER : 3. ' || OPTION3);
	ELSIF (CORRECT_ANSWER = 4) THEN	DBMS_OUTPUT.PUT_LINE('ANSWER : 4. ' || OPTION4);	END IF;
	
	IF(SCORE_FOUND = 0) THEN 
		--QUIZ_COMPETITION_SYSTEM.SCORE_EXIST(QUESTION_ID, TOTAL_SCORE);
		FOR T IN (SELECT * FROM Score WHERE QID = QUESTION_ID) LOOP
			TOTAL_SCORE := T.TOTAL_SCORE;		
		END LOOP;
	ELSE
		QUIZ_COMPETITION_SYSTEM.SCORE_CALCULATE(QUESTION_ID, TOTAL_SCORE);
	END IF;
	
	TOTAL_SCORE := TOTAL_SCORE + ACHIEVED; 
	
	INSERT INTO SCORE VALUES(QUESTION_ID, ACHIEVED, TOTAL_SCORE);
	
	DBMS_OUTPUT.PUT_LINE('-');
	DBMS_OUTPUT.PUT_LINE('YOUR SCORE IS : ');
	DBMS_OUTPUT.PUT_LINE('QID' || CHR(9) || 'GAIN' || CHR(9) || 'TOTAL SCORE' || CHR(9) || 'EVALUATION');
	
	QUIZ_COMPETITION_SYSTEM.PERFORMANCE_EVALUATION;
	QUESTION_FOUND := QUIZ_COMPETITION_SYSTEM.QUESTION_SEARCH2;
		
	IF (QUESTION_FOUND = 0) THEN
		RAISE NOT_FOUND;
	END IF;	
	
EXCEPTION
	WHEN NOT_FOUND THEN
		QUIZ_COMPETITION_SYSTEM.PLAYER_INFO_SEARCH(PLAYER_NAME, GENDER);
		DBMS_OUTPUT.PUT_LINE('-');
		DBMS_OUTPUT.PUT_LINE('OUR GAME HAS BEEN OVER !!!');
		IF (GENDER = 'MALE') THEN
			DBMS_OUTPUT.PUT_LINE('MR. ' || PLAYER_NAME || ', THANKS FOR YOUR PARTICIPATION IN OUR SHOW !!!');	
		ELSIF (GENDER = 'FEMALE') THEN
			DBMS_OUTPUT.PUT_LINE('MRS. ' || PLAYER_NAME || ', THANKS FOR YOUR PARTICIPATION IN OUR SHOW !!!');	
		END IF;
		CORRECTLY__ANSWERED := QUIZ_COMPETITION_SYSTEM.CORRECTLY_ANSWERED;
		INCORRECTLY__ANSWERED := QUIZ_COMPETITION_SYSTEM.INCORRECTLY_ANSWERED;
		TOTAL__ANSWERED := CORRECTLY__ANSWERED + INCORRECTLY__ANSWERED;
		IF (INCORRECTLY__ANSWERED = 0) THEN
			DBMS_OUTPUT.PUT_LINE('-');
			DBMS_OUTPUT.PUT_LINE('CONGRATULATIONS!!! YOU HAVE ANSWERED ALL THE QUESTIONS CORRECTLY');
			DBMS_OUTPUT.PUT_LINE('-');
		END IF;
		DBMS_OUTPUT.PUT_LINE('YOU HAVE ANSWERED TOTAL ' || TOTAL__ANSWERED || ' QUESTIONS');
		DBMS_OUTPUT.PUT_LINE('CORRECTLY ANSWERED ' || CORRECTLY__ANSWERED || ' QUESTION/S');
		DBMS_OUTPUT.PUT_LINE('INCORRECTLY ANSWERED ' || INCORRECTLY__ANSWERED || ' QUESTION/S');
		QUIZ_COMPETITION_SYSTEM.ULTIMATE_SCORE(FINAL_SCORE);
		DBMS_OUTPUT.PUT_LINE('YOUR ULTIMATE SCORE IS ' || FINAL_SCORE);
END;
/

COMMIT;